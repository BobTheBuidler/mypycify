name: "Mypycify & Build Python Wheel"
description: "Set up Python, restore ccache, build a wheel for the current OS and Python version, save ccache, and upload the wheel artifact. The built wheel is cached to speed up subsequent runs with the same code."
inputs:
  python-version:
    description: "Python version to use (passed to actions/setup-python)"
    required: true
  pip-cache-dependency-path:
    description: "Dependency files for actions/setup-python pip cache. This input is passed directly to the 'cache-dependency-path' parameter of actions/setup-python."
    required: false
    default: ""
  hash-key:
    description: "File globs (YAML list of strings) to include in the hash key for caching. This input is required."
    required: true
outputs:
  artifact-name:
    description: "The name of the uploaded wheel artifact."
runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ inputs.python-version }}
        cache: pip
        cache-dependency-path: ${{ inputs.pip-cache-dependency-path }}

    - name: Compute ccache restore-key prefix
      id: ccache_restore_key
      shell: bash
      run: |
        RESTORE_KEY="BobTheBuidler/mypycify:ccache-data-${{ runner.os }}-${{ inputs.python-version }}"
        echo "restore-key=$RESTORE_KEY" >> $GITHUB_OUTPUT

    - name: Compute hash key
      id: hash_key
      run: |
        echo "hash-key=${{ hashFiles(inputs.hash-key) }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Compute ccache key
      id: ccache_key
      shell: bash
      run: |
        CCACHE_KEY="${{ steps.ccache_restore_key.outputs.restore-key }}-${{ steps.hash_key.outputs.hash-key }}"
        echo "ccache-key=$CCACHE_KEY" >> $GITHUB_OUTPUT

    - name: Compute mypy cache restore-key prefix
      id: mypy_cache_restore_key
      shell: bash
      run: |
        MYPY_CACHE_PREFIX="BobTheBuidler/mypycify:mypy_cache-${{ runner.os }}-py${{ inputs.python-version }}"
        echo "restore-key=$MYPY_CACHE_PREFIX" >> $GITHUB_OUTPUT

    - name: Restore mypy cache
      id: mypy_cache_restore
      uses: actions/cache/restore@v4
      with:
        path: .mypy_cache
        key: ${{ steps.mypy_cache_restore_key.outputs.restore-key }}-${{ steps.hash_key.outputs.hash-key }}
        restore-keys: ${{ steps.mypy_cache_restore_key.outputs.restore-key }}

    - name: Compute unique artifact name
      id: artifact_name
      shell: bash
      run: |
        ARTIFACT_NAME="BobTheBuidler/mypycify/wheels/${{ runner.os }}/py${{ inputs.python-version }}-${{ steps.hash_key.outputs.hash-key }}"
        echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

    - name: Cache built wheel (dist/)
      id: wheel-cache
      uses: actions/cache@v4
      with:
        path: dist/
        key: ${{ steps.artifact_name.outputs.artifact-name }}

    - name: Set ccache-dir variable
      if: runner.os != 'Windows' && steps.wheel-cache.outputs.cache-hit != 'true'
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" = "macOS" ]; then
          echo "CCACHE_DIR=$HOME/Library/Caches/ccache" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Install ccache on Linux
      if: steps.wheel-cache.outputs.cache-hit != 'true' && runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y ccache
      shell: bash
    - name: Install ccache on macOS
      if: steps.wheel-cache.outputs.cache-hit != 'true' && runner.os == 'macOS'
      run: brew install ccache
      shell: bash

    - name: Restore ccache cache
      if: runner.os != 'Windows' && steps.wheel-cache.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ steps.ccache_key.outputs.ccache-key }}
        restore-keys: ${{ steps.ccache_restore_key.outputs.restore-key }}

    - name: Show ccache config before build
      if: runner.os != 'Windows' && steps.wheel-cache.outputs.cache-hit != 'true'
      run: |
        echo "ccache -- version && ccache -p"
        echo "==================== CCACHE CONFIG (BEFORE BUILD) ============================"
        ccache --version && ccache -p
        echo "============================================================================="
      shell: bash

    - name: Show ccache stats before build
      if: runner.os != 'Windows' && steps.wheel-cache.outputs.cache-hit != 'true'
      run: |
        echo "ccache -s"
        echo "==================== CCACHE STATS (BEFORE BUILD) ============================="
        ccache -s
        echo "============================================================================="
      shell: bash

    - name: Build wheel
      if: steps.wheel-cache.outputs.cache-hit != 'true'
      env:
        CC: ccache gcc
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
        python -m build --wheel
      shell: bash

    - name: Show ccache stats after build
      if: runner.os != 'Windows' && steps.wheel-cache.outputs.cache-hit != 'true'
      run: |
        echo "ccache -s"
        echo "==================== CCACHE STATS (AFTER BUILD) =============================="
        ccache -s
        echo "============================================================================="
      shell: bash

    - name: Save ccache cache
      if: runner.os != 'Windows' && steps.wheel-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ steps.ccache_key.outputs.ccache-key }}

    - name: Save mypy cache
      id: mypy_cache_save
      uses: actions/cache/save@v4
      with:
        path: .mypy_cache
        key: ${{ steps.mypy_cache_restore_key.outputs.restore-key }}-${{ steps.hash_key.outputs.hash-key }}

    - name: Upload wheel artifact
      uses: actions/upload-artifact@v5
      with:
        name: ${{ steps.artifact_name.outputs.artifact-name }}
        path: dist/*.whl
